#!/usr/bin/env python3

import sys
import os
import re
import shutil
from helpers import verifyGrip, ArgumentParser, getDir, fetchGenInfo, eprint

# grip-branch is my implementation of the grip-branch command.
# Edwin Tang (z5482091)
# Implementation ===============================================================

commitDir = '.grip/commits'


if __name__ == "__main__":
    # Verifying that grip directory exists
    verifyGrip(sys.argv[0])
    currBranch = fetchGenInfo()
    # Error message if no commits have been made
    branches = sorted(getDir(commitDir))
    if len(branches) == 0:
        eprint(sys.argv[0], f"this command can not be run until after the first commit")
        sys.exit(1)
    # Parsing arguments
    parser = ArgumentParser(usage="%(prog)s [-d] <branch>", add_help=False)
    parser.add_argument('-d', action='store_true')
    parser.add_argument('branch', default=None, nargs='?')
    arguments = parser.parse_args()
    # Checking arguments
    if arguments.d and not arguments.branch:
        eprint(sys.argv[0], f"branch name required")
        sys.exit(1)
    if arguments.branch:
        # Verifying the branch name
        if not re.search("^[a-zA-Z0-9][-a-zA-Z0-9_]*$", arguments.branch):
            eprint(sys.argv[0], f"invalid filename '{arguments.branch}'")
            sys.exit(1)
        elif re.search("^\d*$", arguments.branch):
            eprint(sys.argv[0], f"invalid branch name '{arguments.branch}'")
            sys.exit(1)
        # Logic and errorchecking for deleting branch
        if arguments.d:
            if arguments.branch not in branches:
                eprint(sys.argv[0], f"branch '{arguments.branch}' doesn't exist")
                sys.exit(1)
            elif arguments.branch == 'trunk':
                eprint(sys.argv[0], f"can not delete branch '{arguments.branch}': default branch")
                sys.exit(1)
            elif arguments.branch == os.path.basename(currBranch):
                eprint(sys.argv[0], f"can not delete branch '{arguments.branch}': current branch")
                sys.exit(1)
            delCommitNo = sorted(getDir(f"{commitDir}/{arguments.branch}"), reverse=True)[0]
            allCommits = [f for f in getDir(currBranch) if os.path.basename(f) == delCommitNo]
            if len(allCommits) == 0:
                eprint(sys.argv[0], f"branch '{arguments.branch}' has unmerged changes")
                sys.exit(1)
            try:
                shutil.rmtree(f"{commitDir}/{arguments.branch}")
                print(f"Deleted branch '{arguments.branch}'")
            except Exception as e:
                eprint(sys.argv[0], f"unexpected error occured while deleting - {e}")
                sys.exit(1)
        else:
            if arguments.branch in branches:
                eprint(sys.argv[0], f"branch '{arguments.branch}' already exists")
                sys.exit(1)
            newBranch = f"{commitDir}/{arguments.branch}"
            os.mkdir(newBranch)
            latestCommitNo = sorted(getDir(currBranch), reverse=True)[0]
            currBranchLatestCommit = currBranch + '/' + latestCommitNo
            try:
                shutil.copytree(currBranchLatestCommit, f"{newBranch}/{latestCommitNo}")
            except Exception as e:
                eprint(sys.argv[0], f"could not duplicate latest commit - {e}")
                sys.exit(1)
    else:
        for i in branches:
            print(i)
    